}
n.participants(data)
n.participants(data)
shhh <- suppressPackageStartupMessages
{library(tidyr)
library(plyr)
library(dplyr) %>% shhh
library(ggplot2)
library(gridExtra) %>% shhh
library(MASS) %>% shhh
library(Matrix) %>% shhh
library(reshape2)%>% shhh
library(ape) %>% shhh # stats
library(vegan) %>% shhh # stats
library(RColorBrewer)
library(cocor)
library(DescTools) %>% shhh
library(reshape2)
library(grid)
library(ggplotify)
#library(ggpubr) %>% shhh
#library(ggthemes)
library(stringr)
library(rgl)
library(tidyverse)
library(plot.matrix) %>% shhh
library(farver)
library(matrixStats) %>% shhh
#library(plotrix) %>% shhh
#library(JWileymisc)
library(readxl)
#library(visreg)
}
install.packages("tidyr", dependencies = TRUE)
install.packages("plyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("gridExtra", dependencies = TRUE)
install.packages("MASS", dependencies = TRUE)
install.packages("Matrix", dependencies = TRUE)
install.packages("reshape2", dependencies = TRUE)
install.packages("ape", dependencies = TRUE)
install.packages("vegan", dependencies = TRUE)
install.packages("RColorBrewer", dependencies = TRUE)
install.packages("cocor", dependencies = TRUE)
install.packages("DescTools", dependencies = TRUE)
install.packages("reshape2", dependencies = TRUE)
install.packages("grid", dependencies = TRUE)
install.packages("ggplotify", dependencies = TRUE)
install.packages("stringr", dependencies = TRUE)
install.packages("rgl", dependencies = TRUE)
install.packages("tidyverse", dependencies = TRUE)
install.packages("plot.matrix", dependencies = TRUE)
install.packages("farver", dependencies = TRUE)
install.packages("matrixStats", dependencies = TRUE)
install.packages("readxl", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
Sys.setenv(RGL_USE_NULL = TRUE)
library(webshot2)
library(purrr)
library(stringi)
# load data
data <- read_excel("Bella _color_similarity_master_2023-04-19_10h22.10.426.xlsx", col_names = TRUE)
library(data.table)
library(JWileymisc)
library(extraoperators)
library(lme4)
library(lmerTest)
library(multilevelTools)
library(visreg)
library(ggplot2)
library(ggpubr)
library(haven)
setwd("/Users/bella/Documents/stats/data sets")
## load data collection exercise data downloaded off github
## and placed in your R folder.
## merged is a a merged long dataset of baseline and daily
dm <- as.data.table(read_sav("[2021] PSY4210 merged.sav"))
dm[, "Bstress", "Wstress" := meanDeviations(dStress), ID]
dm[, "Bstress", "Wstress" := meanDeviations(dStress), by = ID]
dm[, c("Bstress", "Wstress") := meanDeviations(dStress), by = ID]
View(dm)
dm[, c("Bstress", "Wstress") := meanDeviations(dStress), by = ID]
View(dm)
dm[, c("Bstress", "Wstress") := meanDeviations(dStress), ID]
View(dm)
dm[, c("Bstress", "Wstress") := meanDeviations(dStress), ID]
## load data collection exercise data downloaded off github
## and placed in your R folder.
## merged is a a merged long dataset of baseline and daily
dm <- as.data.table(read_sav("[2021] PSY4210 merged.sav"))
dm[, c("Bstress", "Wstress") := meanDeviations(dStress), ID]
View(dm)
View(dm)
dm[, c("Bstress", "Wstress") := meanDeviations(dStress), ID]
names(dm)
View(dm)
str(dm[, .(ID, dEnergy, Bstress, Wstress)])
dm[, dEnergy := as.numeric(dEnergy)]
yourmodel <- lmer(dEnergy ~  Bstress + Wstress + (Wstress|ID), data = dm)
yourdiag <- modelDiagnostics(yourmodel, alpha = 0.01)
View(yourdiag)
yourdiag <- modelDiagnostics(yourmodel, alpha = 0.01)
plot(yourdiag, ncol = 2, nrow = 3, ask = FALSE) # sometimes this takes awhile
plot(yourdiag, ncol = 3, nrow = 3, ask = FALSE) # sometimes this takes awhile
plot(yourdiag, ncol = 2, nrow = 3, ask = FALSE) # sometimes this takes awhile
plot(yourdiag, ncol = 2, nrow = 1, ask = FALSE) # sometimes this takes awhile
plot(yourdiag, ncol = 2, nrow = 1, ask = FALSE) # sometimes this takes awhile
plot(yourdiag, ncol = 2, nrow = 3, ask = FALSE) # sometimes this takes awhile
yourdiag <- modelDiagnostics(yourmodel, ev.perc = 0.01)
plot(yourdiag, ncol = 2, nrow = 3, ask = FALSE) # sometimes this takes awhile
shhh <- suppressPackageStartupMessages
install.packages("tidyr", dependencies = TRUE)
install.packages("tidyr", dependencies = TRUE)
install.packages("plyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("gridExtra", dependencies = TRUE)
install.packages("MASS", dependencies = TRUE)
install.packages("MASS", dependencies = TRUE)
install.packages("MASS", dependencies = TRUE)
install.packages("MASS", dependencies = TRUE)
install.packages("MASS", dependencies = TRUE)
install.packages("MASS", dependencies = TRUE)
install.packages("Matrix", dependencies = TRUE)
install.packages("Matrix", dependencies = TRUE)
install.packages("ape", dependencies = TRUE)
install.packages("ape", dependencies = TRUE)
install.packages("RColorBrewer", dependencies = TRUE)
install.packages("cocor", dependencies = TRUE)
install.packages("DescTools", dependencies = TRUE)
install.packages("reshape2", dependencies = TRUE)
install.packages("grid", dependencies = TRUE)
install.packages("grid", dependencies = TRUE)
install.packages("ggplotify", dependencies = TRUE)
install.packages("stringr", dependencies = TRUE)
install.packages("rgl", dependencies = TRUE)
install.packages("tidyverse", dependencies = TRUE)
install.packages("plot.matrix", dependencies = TRUE)
install.packages("farver", dependencies = TRUE)
install.packages("matrixStats", dependencies = TRUE)
install.packages("readxl", dependencies = TRUE)
{library(tidyr)
library(plyr)
library(dplyr) %>% shhh
library(ggplot2)
library(gridExtra) %>% shhh
library(MASS) %>% shhh
library(Matrix) %>% shhh
library(reshape2)%>% shhh
library(ape) %>% shhh # stats
library(vegan) %>% shhh # stats
library(RColorBrewer)
library(cocor)
library(DescTools) %>% shhh
library(reshape2)
library(grid)
library(ggplotify)
#library(ggpubr) %>% shhh
#library(ggthemes)
library(stringr)
library(rgl)
library(tidyverse)
library(plot.matrix) %>% shhh
library(farver)
library(matrixStats) %>% shhh
#library(plotrix) %>% shhh
#library(JWileymisc)
library(readxl)
#library(visreg)
}
# for MDS visualisation
Sys.setenv(RGL_USE_NULL = TRUE)
library(webshot2)
library(purrr)
library(stringi)
# load data
data <- read_excel("Bella _color_similarity_master_2023-04-19_10h22.10.426.xlsx", col_names = TRUE)
#library(plotrix) %>% shhh
#library(JWileymisc)
library(readxl)
# load data
data <- read_excel("Bella _color_similarity_master_2023-04-19_10h22.10.426.xlsx", col_names = TRUE)
setwd("/Users/bella/Documents/research/Pilot data/Bella-Honours-Analysis-")
# load data
data <- read_excel("Bella _color_similarity_master_2023-04-19_10h22.10.426.xlsx", col_names = TRUE)
# calculate number of unique participants in dataset
n.participants <- function(df){
return(length(unique(df$participant)))
}
n.participants(data)
# catch scores
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
#MAKE CATCHDATA DATAFRAME WITH ONE ROW PER CATCH TRIAL, FOR ALL PARTICIPANTS
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
#remove empty cells
catchdata <- catchdata %>% drop_na()
catch_perperson<- data.frame(unique(catchdata$participant))
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
catch_perperson$score_decimal <- as.numeric(catch_perperson$score_decimal)
# remove participants with low scores
acceptable.catch <- subset(catch_perperson, score_decimal>=0.77)
hist(catch_perperson$score_decimal)
# remove participants with low catch scores
data <- subset(data, participant %in% acceptable.catch$participant)
n.participants(data)
# rescale data to dissimilarity
rescale <- function(trialdata){
outdata <- trialdata
outdata$similarity[trialdata$similarity == 4] <-  0
outdata$similarity[trialdata$similarity == 3] <-  1
outdata$similarity[trialdata$similarity == 2] <-  2
outdata$similarity[trialdata$similarity == 1] <-  3
outdata$similarity[trialdata$similarity == -1] <- 4
outdata$similarity[trialdata$similarity == -2] <- 5
outdata$similarity[trialdata$similarity == -3] <- 6
outdata$similarity[trialdata$similarity == -4] <- 7
return(outdata)
}
trialdata <- rescale(data)
#nrow(trialdata)
#head(trialdata$Temporder)
trialdata <- subset(trialdata, !is.na(main_trial.thisN))
sort(colnames(trialdata))
double.cor <- function(similarity){
first_pass <- similarity[1:99]
second_pass <- similarity[100:198]
return(cor(first_pass,second_pass))
}
View(double.cor)
# get a df of participant double-pass correlations
double.cor.summary <- trialdata %>% group_by(participant) %>% summarise(correlation = double.cor(similarity))
View(double.cor.summary)
#head(double.cor.summary)
double.cor.acceptable <- subset(double.cor.summary, correlation >= 0.5)
# plot the double-pass correlations
cor.plot <- ggplot(data = double.cor.summary, aes(y = correlation,x=1)) +
geom_boxplot(width=0.2) + geom_jitter(width=0.1) +
xlab("") + xlim(0.5,1.5) + ylim(-1,1) + geom_hline(yintercept = 0, colour = 'blue', linetype = 'dashed')
cor.plot
View(double.cor.acceptable)
View(double.cor.summary)
ggplot(double.cor.summary, aes(x = participant, y = correlation)) +
geom_point() +
labs(x = "Participant", y = "Double-Pass Correlation")
ggplot(trialdata, aes(x = similarity[1:99], y = similarity[100:198])) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Similarity score, first pass", y = "Similarity score, second pass")
ggplot(trialdata, aes(x = first_pass, y = second_pass)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Similarity score, first pass", y = "Similarity score, second pass")
# calculate the double-pass correlation for a participant
first_pass <- similarity[1:99]
double.cor <- function(similarity){
first_pass <- similarity[1:99]
second_pass <- similarity[100:198]
return(cor(first_pass,second_pass))
}
ggplot(trialdata, aes(x = first_pass, y = second_pass)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Similarity score, first pass", y = "Similarity score, second pass")
ggplot(trialdata, aes(x = similarity[1:99], y = similarity[100:198])) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Similarity score, first pass", y = "Similarity score, second pass")
ggplot(trialdata, aes(x = similarity[1:99], y = similarity[100:198])) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Similarity score, first pass", y = "Similarity score, second pass")
# create a subset of the data for a single participant
participant_data <- trialdata %>% filter(participant == "bella")
View(participant_data)
View(trialdata)
# create a subset of the data for a single participant
participant_data <- trialdata %>% filter(participant == "Bella")
# plot all correlations
ggplot(participant_data, aes(x = similarity[1:99], y = similarity[100:198])) +
geom_point() +
labs(x = "Similarity (first pass)", y = "Similarity (second pass)", title = "Correlation Plot for Participant Bella")
# plot all correlations
ggplot(participant_data, aes(x = similarity[1:198]) +
# plot all correlations
ggplot(participant_data, aes(x = similarity[1:198]) +
geom_point() +
labs(x = "Similarity (first pass)", y = "Similarity (second pass)", title = "Correlation Plot for Participant Bella"))
# plot all correlations
ggplot(participant_data, aes(x = similarity[1:198], y = 1) +
# load data
data <- read_excel("Bella _color_similarity_master_2023-04-19_10h22.10.426.xlsx", col_names = TRUE)
View(data)
# calculate number of unique participants in dataset
n.participants <- function(df){
return(length(unique(df$participant)))
}
n.participants(data)
# catch scores
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
#MAKE CATCHDATA DATAFRAME WITH ONE ROW PER CATCH TRIAL, FOR ALL PARTICIPANTS
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
#remove empty cells
catchdata <- catchdata %>% drop_na()
catch_perperson<- data.frame(unique(catchdata$participant))
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
catch_perperson$score_decimal <- as.numeric(catch_perperson$score_decimal)
# remove participants with low scores
acceptable.catch <- subset(catch_perperson, score_decimal>=0.77)
hist(catch_perperson$score_decimal)
# remove participants with low catch scores
data <- subset(data, participant %in% acceptable.catch$participant)
n.participants(data)
# rescale data to dissimilarity
rescale <- function(trialdata){
outdata <- trialdata
outdata$similarity[trialdata$similarity == 4] <-  0
outdata$similarity[trialdata$similarity == 3] <-  1
outdata$similarity[trialdata$similarity == 2] <-  2
outdata$similarity[trialdata$similarity == 1] <-  3
outdata$similarity[trialdata$similarity == -1] <- 4
outdata$similarity[trialdata$similarity == -2] <- 5
outdata$similarity[trialdata$similarity == -3] <- 6
outdata$similarity[trialdata$similarity == -4] <- 7
return(outdata)
}
trialdata <- rescale(data)
#nrow(trialdata)
#head(trialdata$Temporder)
trialdata <- subset(trialdata, !is.na(main_trial.thisN))
sort(colnames(trialdata))
double.cor <- function(similarity){
first_pass <- similarity[1:99]
second_pass <- similarity[100:198]
return(cor(first_pass,second_pass))
}
# get a df of participant double-pass correlations
double.cor.summary <- trialdata %>% group_by(participant) %>% summarise(correlation = double.cor(similarity))
#head(double.cor.summary)
double.cor.acceptable <- subset(double.cor.summary, correlation >= 0.5)
# plot the double-pass correlations
cor.plot <- ggplot(data = double.cor.summary, aes(y = correlation,x=1)) +
geom_boxplot(width=0.2) + geom_jitter(width=0.1) +
xlab("") + xlim(0.5,1.5) + ylim(-1,1) + geom_hline(yintercept = 0, colour = 'blue', linetype = 'dashed')
cor.plot
#plot correlations between all colour pairs
pair_1 <- as.list(data$similarity[1:99])
View(pair_1)
pair_1
View(data)
# remove participants with low catch scores
data <- subset(data, participant %in% acceptable.catch$participant)
# load data
data <- read_excel("Bella _color_similarity_master_2023-04-19_10h22.10.426.xlsx", col_names = TRUE)
# calculate number of unique participants in dataset
n.participants <- function(df){
return(length(unique(df$participant)))
}
n.participants(data)
# catch scores
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
#MAKE CATCHDATA DATAFRAME WITH ONE ROW PER CATCH TRIAL, FOR ALL PARTICIPANTS
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
#remove empty cells
catchdata <- catchdata %>% drop_na()
catch_perperson<- data.frame(unique(catchdata$participant))
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
catch_perperson$score_decimal <- as.numeric(catch_perperson$score_decimal)
# remove participants with low scores
acceptable.catch <- subset(catch_perperson, score_decimal>=0.77)
hist(catch_perperson$score_decimal)
# remove participants with low catch scores
data <- subset(data, participant %in% acceptable.catch$participant)
n.participants(data)
View(data)
# rescale data to dissimilarity
rescale <- function(trialdata){
outdata <- trialdata
outdata$similarity[trialdata$similarity == 4] <-  0
outdata$similarity[trialdata$similarity == 3] <-  1
outdata$similarity[trialdata$similarity == 2] <-  2
outdata$similarity[trialdata$similarity == 1] <-  3
outdata$similarity[trialdata$similarity == -1] <- 4
outdata$similarity[trialdata$similarity == -2] <- 5
outdata$similarity[trialdata$similarity == -3] <- 6
outdata$similarity[trialdata$similarity == -4] <- 7
return(outdata)
}
View(data)
trialdata <- rescale(data)
#nrow(trialdata)
#head(trialdata$Temporder)
trialdata <- subset(trialdata, !is.na(main_trial.thisN))
sort(colnames(trialdata))
double.cor <- function(similarity){
first_pass <- similarity[1:99]
second_pass <- similarity[100:198]
return(cor(first_pass,second_pass))
}
# get a df of participant double-pass correlations
double.cor.summary <- trialdata %>% group_by(participant) %>% summarise(correlation = double.cor(similarity))
#head(double.cor.summary)
double.cor.acceptable <- subset(double.cor.summary, correlation >= 0.5)
# plot the double-pass correlations
cor.plot <- ggplot(data = double.cor.summary, aes(y = correlation,x=1)) +
geom_boxplot(width=0.2) + geom_jitter(width=0.1) +
xlab("") + xlim(0.5,1.5) + ylim(-1,1) + geom_hline(yintercept = 0, colour = 'blue', linetype = 'dashed')
cor.plot
View(data)
# load data
data <- read_excel("Bella _color_similarity_master_2023-04-19_10h22.10.426.xlsx", col_names = TRUE)
# calculate number of unique participants in dataset
n.participants <- function(df){
return(length(unique(df$participant)))
}
n.participants(data)
# catch scores
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
#MAKE CATCHDATA DATAFRAME WITH ONE ROW PER CATCH TRIAL, FOR ALL PARTICIPANTS
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
#remove empty cells
catchdata <- catchdata %>% drop_na()
catch_perperson<- data.frame(unique(catchdata$participant))
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
catch_perperson$score_decimal <- as.numeric(catch_perperson$score_decimal)
# remove participants with low scores
acceptable.catch <- subset(catch_perperson, score_decimal>=0.77)
hist(catch_perperson$score_decimal)
# remove participants with low catch scores
data <- subset(data, participant %in% acceptable.catch$participant)
n.participants(data)
# rescale data to dissimilarity
rescale <- function(trialdata){
outdata <- trialdata
outdata$similarity[trialdata$similarity == 4] <-  0
outdata$similarity[trialdata$similarity == 3] <-  1
outdata$similarity[trialdata$similarity == 2] <-  2
outdata$similarity[trialdata$similarity == 1] <-  3
outdata$similarity[trialdata$similarity == -1] <- 4
outdata$similarity[trialdata$similarity == -2] <- 5
outdata$similarity[trialdata$similarity == -3] <- 6
outdata$similarity[trialdata$similarity == -4] <- 7
return(outdata)
}
trialdata <- rescale(data)
#nrow(trialdata)
#head(trialdata$Temporder)
trialdata <- subset(trialdata, !is.na(main_trial.thisN))
sort(colnames(trialdata))
double.cor <- function(similarity){
first_pass <- similarity[1:99]
second_pass <- similarity[100:198]
return(cor(first_pass,second_pass))
}
# get a df of participant double-pass correlations
double.cor.summary <- trialdata %>% group_by(participant) %>% summarise(correlation = double.cor(similarity))
#head(double.cor.summary)
double.cor.acceptable <- subset(double.cor.summary, correlation >= 0.5)
# plot the double-pass correlations
cor.plot <- ggplot(data = double.cor.summary, aes(y = correlation,x=1)) +
geom_boxplot(width=0.2) + geom_jitter(width=0.1) +
xlab("") + xlim(0.5,1.5) + ylim(-1,1) + geom_hline(yintercept = 0, colour = 'blue', linetype = 'dashed')
cor.plot
#plot correlations between all colour pairs
pair_1 <- as.list(data$similarity[1:99])
View(pair_1)
View(data)
